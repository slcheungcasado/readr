<%- contentFor('styles') %>
<%- contentFor('scripts') %>
<script>
  const toTitleCase = (str) => {
    return str.toLowerCase().replace(/(^|\s)[a-z]/gm, (x) => x.toUpperCase());
  }

  const secondsToHoursMinutes = (seconds) => {
    const hours = Math.trunc(seconds / 3600);
    const minutes = Math.ceil(seconds / 60) - (hours * 60);
    return `${(hours > 0)? `${hours} hr `: ''}` + `${(minutes > 0)? `${minutes} min`: ''}`
  }

  let prevFiltersChecked = {};

  const updateCheckedFilters = (e) => {
    prevFiltersChecked = {};
    for (let el of $("#own-tag-filters-section")?.find('input[type="checkbox"]:checked')) {
      prevFiltersChecked[$(el).attr('id')] = true;
    }

    if (Object.keys(prevFiltersChecked).length === 0) {
      $("#index-search-filters-btn").removeClass("active-button");
    } else {
      $("#index-search-filters-btn").addClass("active-button");
    }
  }

  const getOwnArticles = () => {
    toggleLoadOverLay();
    axios({
      method: 'GET',
      url: '/api/my/reading-list',
    }).then((resp) => {
      generatePage({
        articles: resp.data.articles,
        meta: resp.data.meta,
      });
    }).catch((err) => {
      console.error(err);
    }).finally(() => {
      toggleLoadOverLay();
    });
  }

  const shortenTitle = (title) => {
    const end = title.lastIndexOf(' - ');
    return (end > 0) ? title.slice(0, end) : title;
  }

  const replaceEditTagModalContent = (article) => {
    const $tagsList = $("#current-article-tags");
    $tagsList.html(refreshTagsList(article));
    $("#submit-tag-edit-btn").attr("data-own-article-id", article.id);
  }

  const refreshTagsSearchResult = (tags) => {
    if (tags?.length == 0) return '';
    return tags.map((tag) => `<option value=${tag.name} data-tag-id="${tag?.id}"></option>`).join('');
  }

  const makeTag = (tag) => {
    return `
    <input
      form="tag-edit-form"
      type="text"
      class="btn-check"
      name="user-tag-${tag.name}"
      id="user-tag-${tag.name}"
      value="${tag.name.toUpperCase()}"
      autocomplete="off"
    />
    <label class="btn btn-secondary mx-2" for="user-tag-${tag.name}">
      <span class="btn-close btn-close-white remove-tag-button" data-tag-id="${tag.id}"></span>
      ${tag.name}
    </label>`
  }

  const refreshTagsList = (article) => {
    return article?.tags.map(tag => (tag?.name) ? makeTag(tag) : '').join('') || '';
  }

  const generateTags = (article) => {
    return (article?.tags?.length == 0) ? '' : article?.tags.map(tag => {
      return (tag?.name) ? `<small class="badge rounded-pill text-bg-secondary">${tag.name}</small>` : ''
    }).join('');
  }

  const generateTitle = ({
    info
  } = {}) => {
    return `<h1 class="text-center">My List</h1>`;
  }

  const generateArticle = (readingListArticle, meta) => {
    var options = {
      weekday: 'short',
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    };
    const userTags = readingListArticle?.article?.tags || [];
    article = readingListArticle?.article || {};

    return `
    <div class="col">
      <div class="card h-100">
        <img src="${(article?.image)? article.image : "/imgs/olive-pfp.jpeg"}" class="card-img-top card-image" alt="card-image">
        <div class="card-body text-dark">
          <div class="card-source-info">
            <strong class="article-source-name">
              <a class="text-dark" href="${(article?.sourceURL)? article.sourceURL : " #"}">
                ${(article?.sourceName)? article.sourceName : ""}
              </a>
            </strong>
            <i class="article-author">${(article?.author)? article.author : ""}</i>
            <small class="text-muted article-pubdate">${(article?.pubDate)? new Date(article.pubDate).toLocaleDateString("en-US", options) : ""}</small>
          </div>
          <div class="card-title-wrapper">
            <h5 class="card-title">
              <a class="text-dark" href="${(article?.url)? article.url : " #"}">
                ${(article?.title)? shortenTitle(article.title) : "Card Title"}</a>
            </h5>
            <div class="card-tags-section">
              ${generateTags(readingListArticle)}
            </div>
          </div>
          <p class="card-text line-clamp">${(article?.description)? article.description: ""}</p>
        </div>
        <div class="card-bottom-readinglist">
          <div class="card-actions">
            <button class="btn btn-outline-danger" data-article-id="${(article?.id)? article.id : null}">
              <i class="fas fa-bookmark"></i>
              <span>Remove Bookmark</span>
            </button>
            <button class="btn btn-outline-info" data-bs-toggle="modal" data-bs-target="#editTagsModal" data-own-article-id="${(readingListArticle?.id)? readingListArticle.id : null}">
              <i class="fas fa-tag"></i>
              <span>Edit Tags</span>
            </button>
            <a class="btn btn-outline-secondary" href="/my/reading-list/articles/${(readingListArticle?.id)? readingListArticle.id : ''}">
              <i class="fas fa-eye"></i>
              <span>Read <small>${(article?.readingTime)? '(' + secondsToHoursMinutes(article.readingTime) + ')' : ''}</small></span>
            </a>
          </div>
        </div>
      </div>
    </div>
    `;
  }

  const generateArticles = ({
    articles,
    meta
  } = {}) => {
    if (articles?.length > 0) {
      return `
      <div id="cards-section" class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 row-cols-xxl-4 g-4">
        ${articles.map((art) => generateArticle(art, meta)).join('')}
      </div>
      `;
    }
  }

  const generatePagination = (info = {}) => {
    if (!info?.meta) return ''
    const {
      currentPage,
      totalPages
    } = info.meta;
    if ($(".load-overlay").hasClass('visually-hidden')) return '';

    let links = ''
    if (totalPages > 2 && currentPage > 1) links += `<li class="page-item"><a class="page-link" href="#" data-page="1">First</a></li>`
    if (currentPage - 1 >= 1) links += `<li class="page-item"><a class="page-link" href="#" data-page="${currentPage - 1}">Prev</a></li>`
    if (currentPage - 2 >= 1) links += `<li class="page-item"><a class="page-link" href="#" data-page="${currentPage - 2}">${currentPage - 2}</a></li>`
    if (currentPage - 1 >= 1) links += `<li class="page-item"><a class="page-link" href="#" data-page="${currentPage - 1}">${currentPage - 1}</a></li>`
    links += `<li class="page-item active"><a class="page-link">${currentPage}</a></li>`
    if (currentPage + 1 <= totalPages) links += `<li class="page-item"><a class="page-link" href="#" data-page="${currentPage + 1}">${currentPage + 1}</a></li>`
    if (currentPage + 2 <= totalPages) links += `<li class="page-item"><a class="page-link" href="#" data-page="${currentPage + 2}">${currentPage + 2}</a></li>`
    if (currentPage + 1 <= totalPages) links += `<li class="page-item"><a class="page-link" href="#" data-page="${currentPage + 1}">Next</a></li>`
    if (totalPages > 2 && currentPage < totalPages)
      links += `<li class="page-item"><a class="page-link" href="#" data-page="${totalPages}">Last</a></li>`
    return `
          <ul class="pagination justify-content-center mt-3">
            ${links}
          </ul>
          `
  }

  const generateOwnSearchFilters = (ownTags) => {
    return Object.entries(ownTags).map((([id, name]) => {
      const nameAsUpper = name?.toUpperCase() || '';
      return `
      <input
        form="index-search-form"
        type="checkbox"
        class="btn-check"
        name="user-tag-${nameAsUpper}"
        id="user-tag-${nameAsUpper}"
        value="${nameAsUpper}"
        autocomplete="off"
        ${(prevFiltersChecked[`user-tag-${nameAsUpper}`])? 'checked' : '' }
      />
      <label class="btn btn-outline-secondary mx-2" for="user-tag-${nameAsUpper}">${toTitleCase(name)}</label><br>
      `
    })).join('');
  }

  const updateOwnSearchFilters = () => {

    axios({
      method: "POST",
      url: "/api/my/reading-list/articles/tags",
      data: {
        tagName: '',
        showMine: true,
      }
    }).then((resp) => {
      const ownTags = {};
      resp.data.tags.forEach((tag) => {
        ownTags[tag.id] = tag.name;
      });
      $("#own-tag-filters-section").html(generateOwnSearchFilters(ownTags));
    }).catch((err) => {
      console.error(err);
    }).finally(() => {

    });

  }

  const generatePage = (info) => {
    const $page = $("#pages-own-articles-index");
    const $title = generateTitle(info);
    const $articles = generateArticles(info);
    const $pagination = generatePagination(info);

    updateOwnSearchFilters(info);

    $page.html('').append($title).append($articles).append($pagination);
  }


  const handlePageChange = (e) => {
    e.preventDefault();
    toggleLoadOverLay();

    /*
    assumption: if search bar has content, then pagination is for that search
    otherwise, the pagination is for whichever is the active topic
    */

    let queries = parseFormData(new FormData($('#index-search-form')[0]));
    const page = $(e.currentTarget).data('page');

    queries = {
      page,
      ...queries,
    }
    if (queries?.q) {
      //do pagination for search result
      axios({
        method: 'GET',
        url: '/api/my/reading-list',
        params: {
          ...queries
        }
      }).then((resp) => {
        generatePage({
          articles: resp.data.articles,
          meta: resp.data.meta
        });
      }).catch((err) => {
        console.error(err);
        generatePage({
          displayErr: true
        });
      }).finally(() => {
        toggleLoadOverLay();
      });
    } else {
      //get current topic
      axios({
        method: 'GET',
        url: '/api/my/reading-list',
        params: {
          page,
          ...queries
        }
      }).then((resp) => {
        generatePage({
          articles: resp.data.articles,
          meta: resp.data.meta
        });
      }).catch((err) => {
        console.error(err);
        generatePage({
          displayErr: true
        });
      }).finally(() => {
        toggleLoadOverLay();
      });
    }

  }

  const handleSearch = (e) => {
    e.preventDefault();
    toggleLoadOverLay();
    let queries = parseFormData(new FormData(e.currentTarget));
    axios({
      method: "GET",
      url: "/api/my/reading-list",
      params: {
        ...queries
      }
    }).then((resp) => {
      generatePage({
        articles: resp.data.articles,
        meta: resp.data.meta
      });
    }).catch((err) => {
      console.error(err);
      generatePage({
        displayErr: true
      });
    }).finally(() => {
      toggleLoadOverLay();
    });
  }

  const toggleButtonType = ($button) => {
    if ($button.hasClass('btn-outline-success')) {
      $button.removeClass('btn-outline-success');
      $button.addClass('btn-outline-danger');
      $button.find('span').text('Remove Bookmark');
    } else {
      $button.removeClass('btn-outline-danger');
      $button.addClass('btn-outline-success');
      $button.find('span').text('Bookmark');
    }
  }

  const handleBookmarkArticle = (e) => {
    e.preventDefault();
    toggleLoadOverLay();
    const $button = $(e.currentTarget)
    const articleId = $button.data('article-id');

    axios({
      method: 'POST',
      url: '/api/my/reading-list/articles',
      data: {
        articleId
      }
    }).then((resp) => {
      toggleButtonType($button)
    }).catch((err) => {
      console.error(err);
      generatePage({
        displayErr: true
      });
    }).finally(() => {
      toggleLoadOverLay();
    });
  }


  const handleRemoveBookmark = (e) => {
    e.preventDefault();
    toggleLoadOverLay();
    // console.log("handleRemoveBookmark called");
    // console.log(e.currentTarget, e.$target);
    const $button = $(e.currentTarget)
    const articleId = $button.data('article-id');

    axios({
      method: 'DELETE',
      url: '/api/my/reading-list/articles',
      data: {
        articleId
      }
    }).then((resp) => {
      // generatePage({
      // articles: resp.data.articles,
      // meta: resp.data.meta
      // });
      toggleButtonType($button);
    }).catch((err) => {
      console.error(err);
      generatePage({
        displayErr: true
      });
    }).finally(() => {
      toggleLoadOverLay();
    });
  }

  const showEditTagModal = (e) => {
    console.log(e.currentTarget, e.$target);
    e.preventDefault();
    toggleLoadOverLay();
    // console.log("handleBookmarkArticle called");
    // console.log(e.currentTarget, e.$target);
    const $button = $(e.currentTarget)
    $button?.prop("disabled", true);
    const articleId = $button.data('own-article-id');
    axios({
      method: 'GET',
      url: `/api/my/reading-list/articles/${articleId}`,
      params: {
        // id: articleId,
        tagsOnly: true,
      }
    }).then((resp) => {
      replaceEditTagModalContent(resp.data.articles)
      // console.log(resp?.data);
    }).catch((err) => {
      console.error(err);
      generatePage({
        displayErr: true
      });
    }).finally(() => {
      toggleLoadOverLay();
      $button?.prop("disabled", false);
    });
  }

  const handleTagEdit = (e) => {
    e.preventDefault();
    const formData = parseFormData(new FormData($('#tag-edit-form')[0]));
    // console.log("Tag Edit Details submitted");
    // console.log('formData', formData);
    // console.log('ownArticleId', $("#submit-tag-edit-btn").data('ownArticleId'));
    const ownArticleId = $("#submit-tag-edit-btn").data('ownArticleId')

    axios({
      method: 'PUT',
      url: '/api/my/reading-list/articles/tags',
      data: {
        id: ownArticleId,
        currTags: formData,
      }
    }).then((resp) => {
      console.log(resp.data)
    }).catch((err) => {
      console.error(err)
    }).finally(() => {

    });
  }


  const handleRemoveFromTagList = (e) => {
    const $btn = $(e.currentTarget);
    const $label = $btn?.closest('label');
    const $input = $label?.siblings(`input[name=${$label?.attr('for')}]`);

    $label?.remove();
    $input?.remove();

    console.log('label', $label);
    console.log('input', $input);
  }

  const handleAppendTagList = (e) => {
    console.log('e.currentTarget', e.currentTarget, e.target);
    const tagName = $("#search-tags")?.val() || '';
    const formData = parseFormData(new FormData($('#tag-edit-form')[0]));
    const tagAsUpper = tagName.toUpperCase();
    if (tagName && Object.values(formData).every(v => v.toUpperCase() !== tagAsUpper)) {
      const match = $("#tags-search-list").find(`option[value="${tagAsUpper}"]`);
      // console.log('match', match)
      // console.log('match.data("isUserTag")', match.data("isUserTag"));
      $("#current-article-tags").append(makeTag({
        name: tagAsUpper,
        id: match.data('tagId') || null,
      }));

      // if (match.data('isUserTag') === false) {
      //   $("#current-article-tags").append(makeDefaultTag({
      //     name: tagAsUpper,
      //     isDeletable: false,
      //     id: match.data('tagId') || null,
      //     isRemovable: true,
      //   }));
      // } else {
      //   $("#current-article-tags").append(makeTag({
      //     name: tagAsUpper,
      //     isDeletable: true,
      //     id: match.data('tagId') || null,
      //     isRemovable: true,
      //   }));
      // }

      $("#search-tags").val('');
      $("#tags-search-list").html('');
    } else {
      console.log('tagName', tagName, 'CANT be added');
    }
  }

  const redirectToSelf = (e) => {
    window.location.reload();
  }

  const handleTagSearch = (e) => {
    // console.log(e.target, e.currentTarget, $(e.currentTarget)?.val());
    const code = e.keyCode;

    const tagName = $(e.currentTarget)?.val() || '';
    const formData = parseFormData(new FormData($('#tag-edit-form')[0]));

    console.log('handleTagSearch formData', formData)

    if (code == 8 || code == 9 ||
      code == 46 || code == 95 || code == 189 ||
      (code > 47 && code < 58) ||
      (code > 64 && code < 91) ||
      (code > 96 && code < 123)) {
      // console.log('formData', formData);
      axios({
        method: 'POST',
        url: '/api/my/reading-list/articles/tags',
        data: {
          tagName,
          currTags: {
            ...formData
          }
        }
      }).then((resp) => {
        console.log(resp.data);
        $("#tags-search-list").html(refreshTagsSearchResult(resp.data.tags));
      }).catch(err => {
        console.error(err);
      }).finally(() => {

      });

    }

    if (code == 13) {
      $("#search-tag-add").trigger('click');
    }

  }


  $(document).ready(() => {
    getOwnArticles();

    $("#filtersModal").on('hidden.bs.modal', updateCheckedFilters)
    $("#own-articles-search-section").on('submit', "#index-search-form", handleSearch);

    const $editTagsModal = $("#editTagsModal");
    $editTagsModal.on('submit', "#tag-edit-form", handleTagEdit);
    $editTagsModal.on('keyup', "#search-tags", handleTagSearch);
    $editTagsModal.on('click', "#search-tag-add", handleAppendTagList);
    $editTagsModal.on('click', 'span.btn-close.remove-tag-button', handleRemoveFromTagList)
    $editTagsModal.on('hidden.bs.modal', redirectToSelf)

    const $ownArticlesIndex = $("#pages-own-articles-index");
    $ownArticlesIndex.on('click', 'ul.pagination li.page-item a.page-link', handlePageChange);
    $ownArticlesIndex.on('click', 'div.card-actions button.btn-outline-success[data-article-id]', handleBookmarkArticle);
    $ownArticlesIndex.on('click', 'div.card-actions button.btn-outline-info[data-own-article-id]', showEditTagModal);
    $ownArticlesIndex.on('click', 'div.card-actions button.btn-outline-danger[data-article-id]', handleRemoveBookmark);
  });
</script>


<%- contentFor('body') %>
<div id="pages-own-articles-index-wrapper" class="container-fluid">
  <div id="own-articles-search-section">
    <div class="navbar searchbar">
      <div class="container-fluid justify-content-end">
        <form id="index-search-form" class="d-flex" role="search">
          <input name="q" class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
          <button id="index-search-btn" class="btn btn-secondary" type="submit">
            Search
          </button>
          <div class="modal fade" id="filtersModal" tabindex="-1" aria-labelledby="filtersModalLabel" aria-hidden="true">
            <div class="modal-dialog text-dark">
              <div class="modal-content">
                <div class="modal-header">
                  <h1 class="modal-title fs-5" id="filtersModalLabel">Please select your search filters</h1>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <!-- <div class="modal-body tags-list-in-modal">
                  <input form="index-search-form" type="checkbox" class="btn-check" name="user-tag-headline" id="user-tag-headline" value="HEADLINE" autocomplete="off">
                  <label class="btn btn-outline-secondary mx-2" for="user-tag-headline">Headline</label><br>
                  <input form="index-search-form" type="checkbox" class="btn-check" name="user-tag-world" id="user-tag-world" value="WORLD" autocomplete="off">
                  <label class="btn btn-outline-secondary mx-2" for="user-tag-world">World</label><br>
                  <input form="index-search-form" type="checkbox" class="btn-check" name="user-tag-nation" id="user-tag-nation" value="NATION" autocomplete="off">
                  <label class="btn btn-outline-secondary mx-2" for="user-tag-nation">Nation</label><br>
                  <input form="index-search-form" type="checkbox" class="btn-check" name="user-tag-business" id="user-tag-business" value="BUSINESS" autocomplete="off">
                  <label class="btn btn-outline-secondary mx-2" for="user-tag-business">Business</label><br>
                  <input form="index-search-form" type="checkbox" class="btn-check" name="user-tag-technology" id="user-tag-technology" value="TECHNOLOGY" autocomplete="off">
                  <label class="btn btn-outline-secondary mx-2" for="user-tag-technology">Technology</label><br>
                  <input form="index-search-form" type="checkbox" class="btn-check" name="user-tag-entertainment" id="user-tag-entertainment" value="ENTERTAINMENT" autocomplete="off">
                  <label class="btn btn-outline-secondary mx-2" for="user-tag-entertainment">Entertainment</label><br>
                  <input form="index-search-form" type="checkbox" class="btn-check" name="user-tag-sports" id="user-tag-sports" value="SPORTS" autocomplete="off">
                  <label class="btn btn-outline-secondary mx-2" for="user-tag-sports">Sports</label><br>
                  <input form="index-search-form" type="checkbox" class="btn-check" name="user-tag-science" id="user-tag-science" value="SCIENCE" autocomplete="off">
                  <label class="btn btn-outline-secondary mx-2" for="user-tag-science">Science</label><br>
                  <input form="index-search-form" type="checkbox" class="btn-check" name="user-tag-health" id="user-tag-health" value="HEALTH" autocomplete="off">
                  <label class="btn btn-outline-secondary mx-2" for="user-tag-health">Health</label><br>
                </div> -->
                <div id="own-tag-filters-section" class="modal-body tags-list-in-modal">
                  <!-- <input form="index-search-form" type="checkbox" class="btn-check" name="user-tag-example" id="user-tag-example" value="EXAMPLE" autocomplete="off">
                  <label class="btn btn-outline-secondary mx-2" for="user-tag-example">example</label><br> -->
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
              </div>
            </div>
          </div>
        </form>
        <button id="index-search-filters-btn" class="btn btn-secondary" type="button" data-bs-toggle="modal" data-bs-target="#filtersModal">
          <span>Filters</span>
          <i class="fas fa-filter"></i>
        </button>
      </div>
    </div>

    <!-- <ul id="topic-filter" class="nav justify-content-around">
      <li class="nav-item"><a href="#" class="nav-link text-white active-topic" aria-current="page" data-topic="headlines">Headlines</a></li>
      <li class="nav-item"><a href="#" class="nav-link text-white" data-topic="world">World</a></li>
      <li class="nav-item"><a href="#" class="nav-link text-white" data-topic="nation">Nation</a></li>
      <li class="nav-item"><a href="#" class="nav-link text-white" data-topic="business">Business</a></li>
      <li class="nav-item"><a href="#" class="nav-link text-white" data-topic="technology">Technology</a></li>
      <li class="nav-item"><a href="#" class="nav-link text-white" data-topic="entertainment">Entertainment</a></li>
      <li class="nav-item"><a href="#" class="nav-link text-white" data-topic="sports">Sports</a></li>
      <li class="nav-item"><a href="#" class="nav-link text-white" data-topic="science">Science</a></li>
      <li class="nav-item"><a href="#" class="nav-link text-white" data-topic="health">Health</a></li>
    </ul> -->
  </div>
  <div class="modal fade" id="editTagsModal" tabindex="-1" aria-labelledby="editTagsModalLabel" aria-hidden="true">
    <div class="modal-dialog text-dark">
      <div class="modal-content">
        <div class="modal-header">
          <h1 class="modal-title fs-5" id="editTagsModalLabel">Edit Tags</h1>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body modal-edit-tags-body">
          <form id="tag-edit-form" class="visibility-hidden"></form>
          <div id="current-article-tags" class="tags-list-in-modal">
          </div>
          <div class="d-flex">
            <div class="col">
              <label for="search-tags" class="form-label">Search tag:</label>
              <input list="tags-search-list" id="search-tags" name="tagName" autocomplete="off" class="form-control" />
              <datalist id="tags-search-list">
                <!-- <option value="APPLE"></option> -->
              </datalist>
              <button id="search-tag-add" type="button" class="btn btn-primary my-2">Add tag</button>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button id="submit-tag-edit-btn" type="submit" form="tag-edit-form" class="btn btn-primary">Apply</button>
        </div>
      </div>
    </div>
  </div>
  <div id="pages-own-articles-index" class=""></div>
</div>
