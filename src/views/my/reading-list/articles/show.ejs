<%- contentFor('styles') %>
<link rel="stylesheet" href="/scss/read.scss">

<%- contentFor('scripts') %>
<script>
  const toTitleCase = (str) => {
    return str.toLowerCase().replace(/(^|\s)[a-z]/gm, (x) => x.toUpperCase());
  }

  const secondsToHoursMinutes = (seconds) => {
    const hours = Math.trunc(seconds / 3600);
    const minutes = Math.ceil(seconds / 60) - (hours * 60);
    return `${(hours > 0)? `${hours} hr `: ''}` + `${(minutes > 0)? `${minutes} min`: ''}`
  }

  const redirectToSelf = (e) => {
    window.location.reload();
  }

  const updateShownArticleUrl = (id) => {
    const url = new URL(window.location);
    const newPath = `/my/reading-list/articles/${id}`;
    // window.location = url.origin + newPath; // redirects after url change
    window.history.pushState({}, null, url.origin + newPath); // change url without redirect
  }

  const extractNumberParamFromURL = (url) => {
    const link = new URL(url);
    const pattern = /\/(?<id>\d+)/;
    const matches = link.pathname.match(pattern);
    return matches?.groups?.id || '';
  }

  const extractFilenameFromURL = (url) => {
    const link = new URL(url);
    const pattern = /(?<filename>[^/]*.(jpg|jpeg|png|gif|bmp|svg|webp))/;
    const matches = link.pathname.match(pattern);
    return matches?.groups?.filename || '';
  }

  const shortenTitle = (title) => {
    const end = title.lastIndexOf(' - ');
    return (end > 0) ? title.slice(0, end) : title;
  }


  let id = window.location.pathname.split('/').at(-1);

  const getOwnArticle = () => {
    toggleLoadOverLay();
    id = extractNumberParamFromURL(window.location);
    if (!id) {
      generatePage({});
      toggleLoadOverLay();
    } else {
      axios({
        method: 'GET',
        url: `/api/my/reading-list/articles/${id}`,

      }).then((resp) => {
        // console.log(resp.data.articles)
        generatePage({
          articles: resp.data.articles,
          meta: resp.data.meta,
        });
      }).catch((err) => {
        console.error(err);
      }).finally(() => {
        // console.log('never happens?');
        toggleLoadOverLay();
      });
    }
  }


  const replaceEditTagModalContent = (article) => {
    const $tagsList = $("#current-article-tags");
    $tagsList.html(refreshTagsList(article));
    $("#submit-tag-edit-btn").attr("data-own-article-id", article.id);
  }

  const refreshTagsSearchResult = (tags) => {
    if (tags?.length == 0) return '';
    return tags.map((tag) => `<option value=${tag.name} data-tag-id="${tag?.id}"></option>`).join('');
  }

  const makeTag = (tag) => {
    return `
    <input
      form="tag-edit-form"
      type="text"
      class="btn-check"
      name="user-tag-${tag.name}"
      id="user-tag-${tag.name}"
      value="${tag.name.toUpperCase()}"
      autocomplete="off"
    />
    <label class="btn btn-secondary mx-2" for="user-tag-${tag.name}">
      <span class="btn-close btn-close-white remove-tag-button" data-tag-id="${tag.id}"></span>
      ${tag.name}
    </label>`
  }

  const refreshTagsList = (article) => {
    return article?.tags.map(tag => (tag?.name) ? makeTag(tag) : '').join('') || '';
  }

  const generateTags = (article) => {
    // console.log('generateTags article', article)
    return (article?.tags?.length == 0) ? '' : article?.tags.map(tag => {
      return (tag?.name) ? `<small class="badge rounded-pill text-bg-secondary m-2">${tag.name}</small>` : ''
    }).join('');
  }

  const generateTitle = ({
    info
  } = {}) => {
    return `<h1 class="text-center">My List</h1>`;
  }

  const refreshArticleActions = ({
    articles: readingListArticle = {},
    meta = {}
  }) => {
    const article = readingListArticle?.article || null;
    if (!article) return;
    // console.log('refreshArticleActions article', article);
    const html = `
    <button
      class="btn btn-info mx-2"
      data-bs-toggle="modal"
      data-bs-target="#editTagsModal"
      data-own-article-id="${(readingListArticle?.id)? readingListArticle.id : null}"
    >
      <i class="fas fa-tag"></i>
      <span>Edit Tags</span>
    </button>
    <button
      class="btn btn-danger mx-2"
      data-article-id="${(article?.id)? article.id : null}"
    >
      <i class="fas fa-bookmark"></i>
      <span>Remove Bookmark</span>
    </button>
    `
    $("#own-article-actions").html(html);
    return;
  }
  const imageIsNotInContent = (url, content) => {
    const filename = extractFilenameFromURL(url);
    return (filename) ? !content?.includes(filename) : '';
  }


  const generateArticleContent = ({
    articles: readingListArticle = {},
    meta = {}
  }) => {
    const options = {
      weekday: 'short',
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    };

    // console.log('generateArticleContent readingListArticle', readingListArticle);
    // console.log('generateArticleContent meta', meta);

    const userTags = readingListArticle?.tags || [];
    const article = readingListArticle?.article || null;

    if (!article) {
      return `
      <div class="d-flex flex-column justify-content-center align-items-center" style="width:100%;height:100vh;">
        <h3 class="text-center">No article found!</h3>
        <a class="btn btn-secondary my-3" href="/articles">Search News</a>
      </div>
      `
    }

    // console.log('userTags', userTags);
    // console.log('article', article);
    return `
      <div class="article-content">
        <div class="article-meta-data">
          <ul class="article-meta-data-list">
            ${(article?.url)? `
            <li class="article-source-url">
              <i class="fas fa-link"></i>
              <span>
                Source:
                <strong class="text-muted">
                  <a class="text-dark" href="${(article?.url)? article.url : "#"}">
                    ${(article?.sourceName)? article.sourceName : ""}
                  </a>
                </strong>
              </span>
            </li>
            `
            : ''}
            ${(article?.pubDate)? `
            <li class="article-publication-date">
              <i class="fas fa-calendar"></i>
              <span>
                <small class="text-muted">
                  ${new Date(article.pubDate).toLocaleDateString("en-US", options)}
                </small>
              </span>
            </li>
            `
            : ''}
            ${(article?.author)? `
            <li class="article-author">
              <i class="fas fa-pencil-alt"></i>
              <span>
                <i class="article-author">${article.author}</i>
              </span>
            </li>
            `
            : ''}
            ${(article?.readingTime)? `
              <li class="article-reading-time">
                <i class="fas fa-clock"></i>
                <span>
                  <small>
                    ${secondsToHoursMinutes(article.readingTime)} read
                  </small>
                </span>
              </li>
              `
              : ''}
          </ul>
        </div>
        ${(article?.title)? `
          <div class="article-title-section">
            <h1 class="article-title">
              ${shortenTitle(article.title)}
            </h1>
          </div>
          `
          : '' }
        ${(article?.image && imageIsNotInContent(article.image, article.content))? `
          <div class="article-thumbnail-section">
            <img
              src="${(article.image)}"
              class="article-thumbnail"
            />
          </div>
          ` : ''}
        ${(userTags?.length > 0)? `
          <div class="article-tags-section">
            ${generateTags(readingListArticle)}
          </div>
          ` : ''}
        <div class="article-main-content">
          ${(article?.content)? article.content : `<h3 class="text-center" style="margin-top: 30px;">This content is protected, please visit the original source directly or check out the related links below.</h3>`}
        </div>
        <div class="article-related-links">
          <h4>Related Links:</h4>
          ${(article?.relatedLinks)? article.relatedLinks : `<h5 class="text-center">No related links found.</h5>`}
        </div>

      </div>
    `

    // <div class="article-main-content">
    // ${(article?.content)? `${article.content}` : `<h3 class="text-center">This content is protected, please visit the main source directly or check out the related links below.</h3>`}
    // </div>

    // return `
    // <div class="col">
    //   <div class="card h-100">
    //     <img src="${(article?.image)? article.image : "/imgs/olive-pfp.jpeg"}" class="card-img-top card-image" alt="card-image">
    //     <div class="card-body text-dark">
    //       <div class="card-source-info">
    //         <strong class="article-source-name">
    //           <a class="text-dark" href="${(article?.sourceURL)? article.sourceURL : " #"}">
    //             ${(article?.sourceName)? article.sourceName : ""}
    //           </a>
    //         </strong>
    //         <i class="article-author">${(article?.author)? article.author : ""}</i>
    //         <small class="text-muted article-pubdate">${(article?.pubDate)? new Date(article.pubDate).toLocaleDateString("en-US", options) : ""}</small>
    //       </div>
    //       <div class="card-title-wrapper">
    //         <h5 class="card-title">
    //           <a class="text-dark" href="${(article?.url)? article.url : " #"}">
    //             ${(article?.title)? shortenTitle(article.title) : "Card Title"}</a>
    //         </h5>
    //         <div class="card-tags-section">
    //           ${generateTags(readingListArticle)}
    //         </div>
    //       </div>
    //       <p class="card-text line-clamp">${(article?.description)? article.description: ""}</p>
    //     </div>
    //     <div class="card-bottom-readinglist">
    //       <div class="card-actions">
    //         <button class="btn btn-outline-secondary" data-own-article-id="${(readingListArticle?.id)? readingListArticle.id : null}">
    //           <i class="fas fa-eye"></i>
    //           <span>Read <small>${(article?.readingTime)? '(' + secondsToHoursMinutes(article.readingTime) + ')' : ''}</small></span>
    //         </button>
    //       </div>
    //     </div>
    //   </div>
    // </div>
    // `;
  }

  const handleTagSearch = (e) => {
    // console.log(e.target, e.currentTarget, $(e.currentTarget)?.val());
    const code = e.keyCode;

    const tagName = $(e.currentTarget)?.val() || '';
    const formData = parseFormData(new FormData($('#tag-edit-form')[0]));

    // console.log('handleTagSearch formData', formData)

    if (code == 8 || code == 9 ||
      code == 46 || code == 95 || code == 189 ||
      (code > 47 && code < 58) ||
      (code > 64 && code < 91) ||
      (code > 96 && code < 123)) {
      // console.log('formData', formData);
      axios({
        method: 'POST',
        url: '/api/my/reading-list/articles/tags',
        data: {
          tagName,
          currTags: {
            ...formData
          }
        }
      }).then((resp) => {
        // console.log(resp.data);
        $("#tags-search-list").html(refreshTagsSearchResult(resp.data.tags));
      }).catch(err => {
        console.error(err);
      }).finally(() => {

      });

    }

    if (code == 13) {
      $("#search-tag-add").trigger('click');
    }

  }

  const generatePage = (info) => {
    const $page = $("#pages-own-articles-show");
    refreshArticleActions(info);
    const $article = generateArticleContent(info);

    $page.html('').append($article);
  }


  const handlePageChange = (e) => {
    e.preventDefault();
    toggleLoadOverLay();

    /*
    assumption: if search bar has content, then pagination is for that search
    otherwise, the pagination is for whichever is the active topic
    */

    let queries = parseFormData(new FormData($('#index-search-form')[0]));
    const page = $(e.currentTarget).data('page');

    queries = {
      page,
      ...queries,
    }
    if (queries?.q) {
      //do pagination for search result
      axios({
        method: 'GET',
        url: '/api/my/reading-list',
        params: {
          ...queries
        }
      }).then((resp) => {
        generatePage({
          articles: resp.data.articles,
          meta: resp.data.meta
        });
      }).catch((err) => {
        console.error(err);
        generatePage({
          displayErr: true
        });
      }).finally(() => {
        toggleLoadOverLay();
      });
    } else {
      //get current topic
      axios({
        method: 'GET',
        url: '/api/my/reading-list',
        params: {
          page,
          ...queries
        }
      }).then((resp) => {
        generatePage({
          articles: resp.data.articles,
          meta: resp.data.meta
        });
      }).catch((err) => {
        console.error(err);
        generatePage({
          displayErr: true
        });
      }).finally(() => {
        toggleLoadOverLay();
      });
    }

  }

  const handleSearch = (e) => {
    e.preventDefault();
    toggleLoadOverLay();
    let queries = parseFormData(new FormData(e.currentTarget));
    axios({
      method: "GET",
      url: "/api/my/reading-list",
      params: {
        ...queries
      }
    }).then((resp) => {
      generatePage({
        articles: resp.data.articles,
        meta: resp.data.meta
      });
    }).catch((err) => {
      console.error(err);
      generatePage({
        displayErr: true
      });
    }).finally(() => {
      toggleLoadOverLay();
    });
  }

  const toggleButtonType = ($button) => {
    if ($button.hasClass('btn-success')) {
      $button.removeClass('btn-success');
      $button.addClass('btn-danger');
      $button.find('span').text('Remove Bookmark');
      $('button.btn-info[data-bs-target="#editTagsModal"]').show();
    } else {
      $button.removeClass('btn-danger');
      $button.addClass('btn-success');
      $button.find('span').text('Bookmark');
      $('button.btn-info[data-bs-target="#editTagsModal"]').hide();
    }
  }

  const handleBookmarkArticle = (e) => {
    e.preventDefault();
    toggleLoadOverLay();
    const $button = $(e.currentTarget)
    const articleId = $button.data('articleId');

    axios({
      method: 'POST',
      url: '/api/my/reading-list/articles',
      data: {
        articleId
      }
    }).then((resp) => {
      updateShownArticleUrl(resp.data.article.id);
      updateEditModalId(resp.data.article.id);
      toggleButtonType($button);
      showMessage({
        msg: 'Article added to your reading list',
        type: 'success'
      });
    }).catch((err) => {
      console.error(err);
      generatePage({
        displayErr: true
      });
    }).finally(() => {
      toggleLoadOverLay();
    });
  }


  const handleRemoveBookmark = (e) => {
    e.preventDefault();
    toggleLoadOverLay();
    const $button = $(e.currentTarget)
    const articleId = $button.data('articleId');

    axios({
      method: 'DELETE',
      url: '/api/my/reading-list/articles',
      data: {
        articleId
      }
    }).then((resp) => {
      showMessage({
        msg: 'Article removed from your reading list',
        type: 'warning'
      });
      toggleButtonType($button);
    }).catch((err) => {
      console.error(err);
      generatePage({
        displayErr: true
      });
    }).finally(() => {
      toggleLoadOverLay();
    });
  }

  const showEditTagModal = (e) => {
    // console.log(e.currentTarget, e.$target);
    // console.log('showEditTagModal', e.currentTarget, e.$target);
    e.preventDefault();
    toggleLoadOverLay();
    // console.log("handleBookmarkArticle called");
    // console.log(e.currentTarget, e.$target);
    const $button = $(e.currentTarget)
    $button?.prop("disabled", true);
    const articleId = $button.data('ownArticleId');
    axios({
      method: 'GET',
      url: `/api/my/reading-list/articles/${articleId}`,
      params: {
        id: articleId,
        tagsOnly: true,
      }
    }).then((resp) => {
      replaceEditTagModalContent(resp.data.articles);
      // console.log(resp?.data);
    }).catch((err) => {
      console.error(err);
      generatePage({
        displayErr: true
      });
    }).finally(() => {
      toggleLoadOverLay();
      $button?.prop("disabled", false);
    });
  }

  const toggleApplyButton = ($button) => {
    if ($button.prop('disabled')) {
      $button.html('Apply');
      $button.removeClass('btn-success');
      $button.addClass('btn-primary');
      $button.prop('disabled', false);
    } else {
      $button.prop('disabled', true);
      $button.removeClass('btn-primary');
      $button.addClass('btn-success');
      $button.html(`<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>Loading...`);
    }
  }

  const updateEditModalId = (id) => {
    console.log('updating article id', $('button.btn-info[data-bs-target="#editTagsModal"]').data('ownArticleId'), id);
    console.log($('button.btn-info[data-bs-target="#editTagsModal"]'));
    $('button.btn-info[data-bs-target="#editTagsModal"]').data('ownArticleId', id);
  }

  const handleTagEdit = (e) => {
    e.preventDefault();
    const formData = parseFormData(new FormData($('#tag-edit-form')[0]));
    const $submitButton = $("#submit-tag-edit-btn");
    const ownArticleId = $submitButton.data('ownArticleId');

    toggleApplyButton($submitButton);

    axios({
      method: 'PUT',
      url: '/api/my/reading-list/articles/tags',
      data: {
        id: ownArticleId,
        currTags: formData,
      }
    }).then((resp) => {
      showMessage({
        msg: 'Tag Edited Successfully',
        type: 'success'
      });
    }).catch((err) => {
      console.error(err)
    }).finally(() => {
      toggleApplyButton($submitButton);
    });
  }


  const handleRemoveFromTagList = (e) => {
    const $btn = $(e.currentTarget);
    const $label = $btn?.closest('label');
    const $input = $label?.siblings(`input[name=${$label?.attr('for')}]`);

    $label?.remove();
    $input?.remove();
  }

  const handleAppendTagList = (e) => {
    const tagName = $("#search-tags")?.val() || '';
    const formData = parseFormData(new FormData($('#tag-edit-form')[0]));
    const tagAsUpper = tagName.toUpperCase();
    if (!tagName) {
      showMessage({
        msg: 'Tag name CANNOT be empty',
        type: 'danger'
      });
      return;
    } else if (!Object.values(formData).every(v => v.toUpperCase() !== tagAsUpper)) {
      showMessage({
        msg: 'Article already has this tag',
        type: 'info'
      });
      $("#search-tags").val('');
      return;
    }

    const match = $("#tags-search-list").find(`option[value="${tagAsUpper}"]`);
    $("#current-article-tags").append(makeTag({
      name: tagAsUpper,
      id: match.data('tagId') || null,
    }));

    $("#search-tags").val('');
    $("#tags-search-list").html('');
  }

  const handleTagClick = (e) => {
    window.location.replace(`/my/reading-list?tagFilter=${$(e.currentTarget).text()}`);
  }

  $(document).ready(() => {
    getOwnArticle();
    // $('ul.nav > li.nav-item:first-child > a').attr('href', window.location.pathname || '/my/reading-list/articles/blank');

    const $editTagsModal = $("#editTagsModal");
    $editTagsModal.on('submit', "#tag-edit-form", handleTagEdit);
    $editTagsModal.on('keyup', "#search-tags", handleTagSearch);
    $editTagsModal.on('click', "#search-tag-add", handleAppendTagList);
    $editTagsModal.on('click', 'span.btn-close.remove-tag-button', handleRemoveFromTagList);
    $editTagsModal.on('hidden.bs.modal', redirectToSelf);

    const $ownArticleActions = $("#own-article-actions");
    $ownArticleActions.on('click', 'button.btn-success[data-article-id]', handleBookmarkArticle);
    $ownArticleActions.on('click', 'button.btn-danger[data-article-id]', handleRemoveBookmark);
    $ownArticleActions.on('click', 'button.btn-info[data-own-article-id]', showEditTagModal);

    $("#pages-own-articles-show").on('click', 'small.badge.rounded-pill', handleTagClick);

  });
</script>


<%- contentFor('body') %>
<div id="pages-own-articles-show-wrapper" class="container-fluid">
  <div id="own-article-actions" class="d-flex my-2 justify-content-end">
    <!-- <button class="btn btn-secondary">Edit Tag</button>
    <button class="btn btn-secondary">Remove Bookmark</button> -->
  </div>
  <div class="modal fade" id="editTagsModal" tabindex="-1" aria-labelledby="editTagsModalLabel" aria-hidden="true">
    <div class="modal-dialog text-dark">
      <div class="modal-content">
        <div class="modal-header">
          <h1 class="modal-title fs-5" id="editTagsModalLabel">Edit Tags</h1>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body modal-edit-tags-body">
          <form id="tag-edit-form" class="visibility-hidden"></form>
          <div id="current-article-tags" class="tags-list-in-modal">
          </div>
          <div class="d-flex">
            <div class="col">
              <label for="search-tags" class="form-label">Search tag:</label>
              <input list="tags-search-list" id="search-tags" name="tagName" autocomplete="off" class="form-control" />
              <datalist id="tags-search-list">
                <!-- <option value="APPLE"></option> -->
              </datalist>
              <button id="search-tag-add" type="button" class="btn btn-primary my-2">Add tag</button>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button id="submit-tag-edit-btn" type="submit" form="tag-edit-form" class="btn btn-primary">Apply</button>
        </div>
      </div>
    </div>
  </div>
  <div id="pages-own-articles-show"></div>
</div>
